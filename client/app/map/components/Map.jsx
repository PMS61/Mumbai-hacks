"use client"

import React, { useState } from 'react';
import generateInterpolatedGrid from './interpolategrid';
import gradient from './gradient';
import dot from './dot';

async function loadMatrix() {
  const response = await fetch('/multisource_bfs.txt'); // Assumes this file is served
  const text = await response.text();
  return text.trim().split('\n').map(row => row.split(' ').map(Number));
}

function getShadeFromValue(value, color = 'blue') {
  // Clamp the value to ensure it's between 0 and 1
  const clampedValue = Math.min(Math.max(value, 0), 1);

  // Define base hues for primary colors
  const hues = {
    red: 0,
    green: 120,
    blue: 240,
    purple: 270,
    yellow: 60,
    orange: 30,
    pink: 300
  };

  // Set the hue based on the color input, defaulting to blue
  const hue = hues[color.toLowerCase()] || hues['blue'];

  // Adjust lightness to give 0.3 a light shade and 0.7 a darker shade
  const lightness = 85 - clampedValue * 30; // Range from 85% (light) to 35% (dark)

  return `hsl(${hue}, 100%, ${lightness}%)`;
}

function generateRandomGrid(n, m) {
  const grid = Array.from({ length: n }, () => 
    Array.from({ length: m }, () => Math.random())
  );
  return grid;
}

function adjustElements(arr, increaseFactor = 0.1, decreaseFactor = 0.1) {
  // Calculate the average of all elements
  const total = arr.flat().reduce((sum, value) => sum + value, 0);
  const avgValue = total / (arr.length * arr[0].length);

  // Adjust elements based on average, clamping between 0 and 1
  const adjustedArr = arr.map(row => 
      row.map(value => {
          if (value > avgValue) {
              return Math.min(1, value + increaseFactor);  // Increase and clamp to 1
          } else {
              return Math.max(0, value - decreaseFactor);  // Decrease and clamp to 0
          }
      })
  );

  return adjustedArr;
}



const Map = ({v = 20, color = "blue" }) => {

  let oldgrid = [[0.6496297709843625, 0.4010279595778278, 0.26498164058322343, 0.7333344517444067, 0.9330987466106901, 0.8372921590296665, 0.22648872746489063, 0.15748206522992783, 0.360018621544372, 0.17293501122954621, 0.3028035070575234], [0.6287434441888409, 0.3028915819295527, 0.25243306833980966, 0.16839915532003685, 0.7410451970884963, 0.1254752373303248, 0.4233842979279338, 0.8597302811895141, 0.09680896350554767, 0.21474331417355363, 0.562037213730453], [0.2731956709103377, 0.7607655803400108, 0.04288826863674779, 0.45351848628653274, 0.6943529327883875, 0.029731560372179257, 0.3276846584058029, 0.8425430990192233, 0.39620481182384193, 0.6859103271981496, 0.7468539446009055], [0.4422029622515293, 0.8478716287769965, 0.414698437929234, 0.36151799138963275, 0.2674204757301302, 0.4929361855611733, 0.27642298586398306, 0.7248373236143411, 0.2518605816716192, 0.9310646364709657, 0.171295140993191], [0.9852705261634795, 0.8871949621173199, 0.42555052037570223, 0.37503538722536894, 0.26477403552772577, 0.5832255115157895, 0.649753495209356, 0.481624855567695, 0.49275164773406427, 0.528390515594495, 0.3222680537760005], [0.35005986994277233, 0.4043831927979919, 0.43857721335298944, 0.3458595373552794, 0.6675467163800388, 0.9072068312548363, 0.3043573994426119, 0.5504763382662251, 0.46825215416457844, 0.16735064493873555, 0.6194955826257635], [0.31607345444327245, 0.9081441995357196, 0.42951598663778373, 0.9334091056835554, 0.7991117020049615, 0.9616035498367469, 0.2590722360742094, 0.16451547286769688, 0.9986830709610857, 0.8799350762371898, 0.8750448238188007], [0.8831330329001587, 0.4804127775669107, 0.9034300968613891, 0.9593115061432222, 0.09782182453388473, 0.8300071089003852, 0.6145004791692442, 0.13101976022664602, 0.31527239251195827, 0.6638328926094696, 0.07372286193005599], [0.5949541486410256, 0.49030232748334446, 0.7708207948966902, 0.13210391996091156, 0.3001444847305434, 0.3566864555525965, 0.6425795871804927, 0.2311525016409188, 0.6729612239890786, 0.2744895327208635, 0.35460411393533214], [0.09434496410948966, 0.866384128069252, 0.32006618197526776, 0.5341594197124145, 1.0, 0.9454543929439445, 0.5181486661899439, 0.9158192955268449, 0.1983068654362747, 0.5286715163766837, 0.262947530443499], [0.46823957204000277, 0.687158054551898, 0.06543333885548802, 0.9554215326285946, 0.8093661335340882, 0.7595744725468526, 0.9434769023648103, 0.791321269871893, 0.08121761413559757, 0.2744266220979854, 0.7316379619474612], [0.3177280038249659, 0.9544464179739843, 0.12447495842656338, 0.35310055004854607, 0.08602188870272005, 0.05470288361325067, 0.11268970174073696, 0.7871880419488033, 0.14398773662258033, 0.571857561961721, 0.23921554647312568], [0.26700945966066014, 0.4703659510932818, 0.2986723761551963, 0.39805857817798257, 0.19205774356371902, 0.8464309755130884, 0.6691886836371567, 0.7326864723287625, 0.7804209559478849, 0.49694778628003194, 0.7840634810125254], [0.08029702202081503, 0.794091434299291, 0.7754615018443297, 0.2509211163699732, 0.06904440860868966, 0.9599364183304778, 0.6336546668148562, 0.4168415931486138, 0.9730427980967439, 0.5787798274990721, 0.6969029100357123], [0.16148947190726134, 0.2077224886603602, 0.6903056827165646, 0.6432233725546117, 0.22804052282921655, 0.29680812469724266, 0.4551772297097514, 0.1548398190690486, 0.070308912128539, 0.5094649032120067, 0.44177097597443316], [0.5585498682022451, 0.614148179681127, 0.5179830015496983, 0.3258308920516622, 0.047575110041164534, 0.8932364789343779, 0.5430675639119502, 0.4670044268108299, 0.6050932440282091, 0.04260726785455904, 0.9645729312365922], [0.1488318545841923, 0.8330331098608208, 0.19547588740676125, 0.6226243376035665, 0.3037031289646799, 0.21380384887190768, 0.6900687193703905, 0.1642701214384724, 0.8198701105339643, 0.2290533838575536, 0.37725822923372765], [0.003678174417604912, 0.0, 0.3361377490998539, 0.019693121981600746, 0.08653565878955768, 0.635523112314335, 0.8609528442941113, 0.7708753174365179, 0.44063229370033996, 0.32761335969987443, 0.6094865025258615], [0.5010285886840566, 0.4261523653345692, 0.22363048816546333, 0.4086590181329386, 0.9411366271937458, 0.5420022773645482, 0.733739176751589, 0.5226488727464891, 0.41086508397519644, 0.6593012307414855, 0.5913577580331623], [0.3214669918446863, 0.42083432068060905, 0.9229470690989311, 0.284200835872476, 0.14110643009476434, 0.3687044815430718, 0.3859986117722552, 0.6080710135111047, 0.07942046734204715, 0.8543807812241149, 0.13640071550348418]]

  console.log(
    "oldgrid: ", oldgrid
  )

  oldgrid = adjustElements(oldgrid,0.1,0.07)

  let interpolate = 15
  v = v / interpolate


  let grid = generateInterpolatedGrid(oldgrid, interpolate);
  

  console.log("out")

  // return(
  //   <div className="flex">
  //     {grid.map((row, i) => {
  //       return (
  //         <div key={i} style={{ display: "flex" }}>
  //           {row.map((cell, j) => {
  //             return (
  //               <div
  //                 key={j}
  //                 style={{
  //                   width: v,
  //                   height: v,
  //                   backgroundColor: getShadeFromValue(cell, color),
  //                   // border: "1px solid black",
  //                   display: "flex",
  //                   justifyContent: "center",
  //                   alignItems: "center",
  //                   color: "black",
  //                 }}
  //               >
            
  //               </div>
  //             );
  //           })}
  //         </div>
  //       );
  //     })}
  //   </div>
  // )

  return(
    <div>
       {grid.map((row, i) => {
          return (
            <div key={i} style={{ display: "flex" }}>
              {row.map((cell, j) => {
                return (
                  <div
                    key={j}
                    style={{
                      width: v,
                      height: v,
                      backgroundColor: getShadeFromValue(cell, color),
                      // border: "1px solid black",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      color: "black",
                    }}
                  >
              
                  </div>
                );
              })}
            </div>
          );
        })}
    </div>
  )
};

export default Map;
