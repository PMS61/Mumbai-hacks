"use client"

import React, { useState } from 'react';
import generateInterpolatedGrid from './interpolategrid';
import gradient from './gradient';
import dot from './dot';

async function loadMatrix() {
  const response = await fetch('/multisource_bfs.txt'); // Assumes this file is served
  const text = await response.text();
  return text.trim().split('\n').map(row => row.split(' ').map(Number));
}

function getShadeFromValue(value, color = 'blue') {
  // Clamp the value to ensure it's between 0 and 1
  const clampedValue = Math.min(Math.max(value, 0), 1);

  // Define base hues for primary colors
  const hues = {
    red: 0,
    green: 120,
    blue: 240,
    purple: 270,
    yellow: 60,
    orange: 30,
    pink: 300
  };

  // Set the hue based on the color input, defaulting to blue
  const hue = hues[color.toLowerCase()] || hues['blue'];

  // Adjust lightness to give 0.3 a light shade and 0.7 a darker shade
  const lightness = 85 - clampedValue * 30; // Range from 85% (light) to 35% (dark)

  return `hsl(${hue}, 100%, ${lightness}%)`;
}

function generateRandomGrid(n, m) {
  const grid = Array.from({ length: n }, () => 
    Array.from({ length: m }, () => Math.random())
  );
  return grid;
}



const Map = ({v = 20, color = "blue" }) => {

  let oldgrid = [[0.20821943708750015, 0.6364160680548696, 0.4874830163292407, 0.5677140968497948, 0.9749059394113502, 0.4419132810473228, 0.46443579036544025, 0.45359775339197067, 0.6402810898276791, 0.571300637721264, 0.6030196123838991], [0.5834350765749196, 0.4615256649464365, 0.6753792103747328, 0.20401290978831058, 0.8369201184862952, 0.7634158174220586, 0.15407175719983057, 0.433564716762938, 0.6852308386818767, 0.34304303409339076, 0.8701524169943704], [0.844438369978, 0.7019770678306191, 0.5940906352735635, 0.6464604344595198, 0.6343318583616823, 0.37512256823881357, 0.28954245587909827, 0.8247094638070099, 0.6594002693936298, 0.6219313969627994, 0.43987304202276806], [0.6500279213745819, 0.5187930637735921, 0.5110036598253193, 0.5505816586615622, 0.377902980185351, 0.8424406359331237, 0.45716817168494134, 0.4202020305654775, 0.6875429630074765, 0.8087840204727433, 0.12907956199351286], [0.7398636616134598, 0.5909196172206728, 0.0, 0.49581765656855836, 0.45399055803175564, 0.5163907995772954, 0.8728763999161626, 0.42457051649413063, 0.7221354208652548, 0.48636835987940313, 0.7193322907399238], [0.7326619989359099, 0.40477492147571426, 0.6863667476215533, 0.24866072671789738, 0.2355948425337072, 0.850415449534131, 0.28338802795948254, 0.3439180503991804, 0.471164035510712, 0.9928386437686968, 0.49081452732264064], [0.7029510181408323, 0.6395958802414871, 0.5136792750116156, 0.13356163881613373, 0.5133854043762541, 0.4908687578139543, 0.40008105259917953, 0.11526471075361326, 0.48705137093216355, 0.515565616695956, 0.018208986725255137], [0.5672897798974897, 0.5357122442189565, 0.9277906351269947, 0.25532594723812907, 0.6109739063395445, 0.4973273161916125, 0.4340498598068515, 0.7099394230755137, 0.4571198039494455, 0.3116567708234094, 0.392504906393775], [0.9779824205266807, 0.9335332044504182, 0.6024216112904952, 0.542349616649054, 0.25206845353692736, 0.677914852265882, 0.6817732784383964, 0.23180090667518718, 0.2960691687931371, 0.6302631058242083, 0.5007863421240472], [0.4214464004877813, 0.408115959447318, 0.41337631710473677, 0.41199856948758046, 0.5464725996778417, 0.6900778720541485, 0.829730914164858, 0.6298644384286056, 0.6070165461626066, 0.34818027387863804, 0.8234445742393441], [0.6819660165359027, 0.41495632979760305, 0.5289422269384836, 0.18200632298214936, 0.3552932623744454, 0.7882174730643013, 0.502746701100586, 0.6698176536371805, 0.794475964899681, 0.877395118962644, 0.3881298248648269], [0.6010966284756982, 0.45844991667558294, 0.7371052350012387, 0.3415245803366102, 0.5649454104148927, 0.32080926549929434, 0.4124265506622716, 0.5664675283940593, 0.7930425211022568, 0.8241561662267157, 0.3170043369736161], [0.9936953389625561, 0.5079103232870127, 0.6057164800600346, 0.2566934350326043, 0.38855121043922297, 0.7246578715558142, 0.36131138122129997, 0.4690175340369618, 0.580074251802431, 0.6043116171972217, 0.987661097537203], [0.6281224671062757, 0.35060379056477403, 0.6539552349279543, 0.5601570046007978, 0.725661868489593, 0.773760650062365, 0.39913201900119166, 0.557821429251927, 0.4905543675332309, 0.6806857372342158, 0.6608747524817778], [0.16659387078193041, 0.6216609773507087, 0.21001930312352973, 0.5300583490772756, 0.5358478204472403, 0.7281227602440666, 0.40191096525877473, 0.6475721595314486, 0.7121445521074409, 0.7485551971131792, 0.45970601210952217], [0.7027766011552561, 0.4561180055490984, 1.0, 0.9924128611274374, 0.6426958123800884, 0.6528889462136125, 0.6278711014505924, 0.7770005554961138, 0.407580250134477, 0.2008719383589854, 0.49350773077639015], [0.5460226331688343, 0.21069352004256361, 0.8187609651854902, 0.31012659155499345, 0.7498933711285659, 0.6386277926870916, 0.47278435464982493, 0.7779144125591956, 0.7169652030785333, 0.6354824241909032, 0.4137661903666128], [0.8573928618016543, 0.9188448025936833, 0.6462706277399224, 0.6563531020573877, 0.5521448159314527, 0.27702840358624775, 0.5879340088205162, 0.7038135760905093, 0.7949295956310743, 0.6242559796445118, 0.5011666884077196], [0.6284617740992242, 0.837987140045114, 0.4852837500531313, 0.4949675569749939, 0.49023045027430373, 0.2763952259579377, 0.34203317440379444, 0.9653100738267528, 0.8265554990451038, 0.4260801761171848, 0.6235517161019123], [0.6019914315823724, 0.5306043182127975, 0.530818308800143, 0.9308561235751672, 0.966229060801175, 0.33243584313024266, 0.4136210871601252, 0.2548048948148322, 0.33912231614031335, 0.8256431076709764, 0.7523689197725838]]

  console.log(
    "oldgrid: ", oldgrid
  )

  let interpolate = 20
  v = v / interpolate


  let grid = generateInterpolatedGrid(oldgrid, interpolate);
  

  console.log("out")

  // return(
  //   <div className="flex">
  //     {grid.map((row, i) => {
  //       return (
  //         <div key={i} style={{ display: "flex" }}>
  //           {row.map((cell, j) => {
  //             return (
  //               <div
  //                 key={j}
  //                 style={{
  //                   width: v,
  //                   height: v,
  //                   backgroundColor: getShadeFromValue(cell, color),
  //                   // border: "1px solid black",
  //                   display: "flex",
  //                   justifyContent: "center",
  //                   alignItems: "center",
  //                   color: "black",
  //                 }}
  //               >
            
  //               </div>
  //             );
  //           })}
  //         </div>
  //       );
  //     })}
  //   </div>
  // )

  return(
    <div>
       {grid.map((row, i) => {
          return (
            <div key={i} style={{ display: "flex" }}>
              {row.map((cell, j) => {
                return (
                  <div
                    key={j}
                    style={{
                      width: v,
                      height: v,
                      backgroundColor: getShadeFromValue(cell, color),
                      // border: "1px solid black",
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      color: "black",
                    }}
                  >
              
                  </div>
                );
              })}
            </div>
          );
        })}
    </div>
  )
};

export default Map;
